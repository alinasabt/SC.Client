@page "/Student/{id}/"
@page "/Student/"
@using StudentControl.Domain.Model;
@using StudentControl.DTO;
@using AutoMapper;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Web;
@using Newtonsoft.Json;
@inject HttpClient Http;
@inject IMapper Mapper;

<PageTitle>Student Redactor</PageTitle>
<div>
    <h3>Student Redactor</h3>

    <label class="control-label" for="GUID">Student:</label>
    <input class="control-input" id = "GUID"type="text" @bind-value="@Student.Id" ></input>
    <button class ="RedactButton" @onclick="GetStudent">Get</button>
    <button class ="RedactButton" @onclick="NewStudent">New</button>
</div>
<div>
    <table>
    <tr>
        <td>
            <label class="control-label" for="TextName">Name</label>
            <input class="control-input" id = "TextName" type="text" @bind-value="@Student.Name" >Name</input>
        </td>
        <td>
            <label class="control-label" for="TextSurname">Surname</label>
            <input class="control-input" id = "TextSurname" type="text" @bind-value="@Student.Surname" >Surname</input>
        </td>
    </tr>
    <tr>
        <td>
            <label class="control-label" for="TextMidName">Middle name</label>
            <input class="control-input" id = "TextMidName" type="text" @bind-value="@Student.Middle_name" ></input>
        </td>
        <td>
            <label class="control-label" for="Graduate">Graduate</label>
            <input class="control-input" id = "Graduate" type="text" @bind-value="@Student.Graduate" ></input>
        </td>
    </tr>
    <tr>
        <td>
            <label class="control-label" for="Status">Status</label>
            <select class="control-input" @bind = "@Student.Status">
                @foreach(var Val in Enum.GetValues(typeof(Status))){
                    <option value=@Val >@Val</option>
                }
            </select>
        </td>
        <td>
            <label class="control-label" for="Snils">Snils</label>
            <input class="control-input" id = "Snils" type="text" @bind-value="@Student.Snils" ></input>
        </td>
    </tr>
    </table>
</div>

<div>
    <label class="control-label" for="Group">Group: </label>
    <select class="control-input" id= "Group" @bind="@Student.GroupID">
        @foreach(var group in groupDTOs)
        {
        <option value="@group.Id"> @group.Name</option>
        }
    </select>

    @if (!CreatingFlag)
    {
                    <button class ="RedactButton" @onclick="SetGroup">Set</button>
    }
    else
    {
                    <button class ="RedactButton" disabled @onclick="SetGroup">Set</button> 
    }
</div>

<div>
    <label class="control-label" for="Orders">Orders: </label>
    <select class="control-input" id= "Orders" @bind="@guid">
        @foreach (var order in orderDTOs)
        {
            <option value="@order.Id"> @order.Number</option>
        }
    </select>

    @if (!CreatingFlag)
    {
            <button class ="RedactButton" @onclick="@(e => AppendOrder(true))">Add</button>
            <button class ="RedactButton" @onclick="@(e => AppendOrder(false))">Remove</button>
            <button class ="RedactButton" @onclick=RemoveOrder>Delete</button>
            <button class ="RedactButton" @onclick=SetOrders>Send</button>
    }
    else
    {
                <button class ="RedactButton" @onclick="@(e => AppendOrder(true))">Add</button>
                <button class ="RedactButton" disabled @onclick="@(e => AppendOrder(false))">Remove</button>
                <button class ="RedactButton" @onclick=RemoveOrder>Delete</button>
                <button class ="RedactButton" @onclick=SetOrders>Send</button>
    }
</div>

<div align="right">
    @if (!CreatingFlag)
    {
              <button class ="RedactButton" @onclick="PutStudent">Put</button>  
    }
    else
    {
                <button class ="RedactButton" @onclick="PostStudent">Post</button>
    }
    
    <p>Guid:    @Student.Id.ToString()</p>
    <p>Status:  @StatusCode</p>
    <p>Method Name: @MethodName</p>

</div>



@code {
    List<StudentDTO>? DTOStudents = new List<StudentDTO>();
    List<OrderDTO>? orderDTOs = new List<OrderDTO>();
    List<Tuple<Guid, bool>> NewOrdersList = new List<Tuple<Guid, bool>>();
    List<GroupDTO>? groupDTOs = new List<GroupDTO>();
    List<Student>? Students = new List<Student>();
    [Parameter]
    public string id { get; set; } = String.Empty;
    public Guid guid { get; set; } = Guid.NewGuid();
    Student? Student = new Student();
    String StatusCode = "";
    String MethodName = "";
    bool CreatingFlag = true;

    //MapperConfiguration MapperConfiguration = new MapperConfiguration(conf => conf.AddProfile(new MapperProfile()));
    //IMapper Mapper = MapperConfiguration.CreateMapper();

    protected override async Task OnInitializedAsync()
    {

        groupDTOs = await Http.GetFromJsonAsync<List<GroupDTO>>("http://localhost:5232/AllGroups");
        orderDTOs = await Http.GetFromJsonAsync<List<OrderDTO>>("http://localhost:5232/AllOrders");
        DTOStudents = await Http.GetFromJsonAsync<List<StudentDTO>>("http://localhost:5232/AllStudents");
        Students = Mapper.Map<List<StudentDTO>, List<Student>>(DTOStudents);
        NewOrdersList = new List<Tuple<Guid, bool>>();
        Student = new Student();

        if (Guid.TryParse(id, out Guid guid))
        {
            Student.Id = guid;
            GetStudent();
            guid = Guid.Empty;
            StateHasChanged();
        }

    }

    async void NewStudent()
    {
        Student = Mapper.Map<Student>(new StudentDTO());
        CreatingFlag = true;
        StatusCode = "Ok";
        MethodName = nameof(NewStudent);
    }

    async void GetStudent()
    {
        try
        {
            Student = Mapper.Map<Student>( await Http.GetFromJsonAsync<StudentDTO>($"http://localhost:5232/api/Student/{Student.Id}/Get"));
            CreatingFlag = false;
        }
        catch (System.Net.Http.HttpRequestException e)
        {
            Student = Mapper.Map<Student>(new StudentDTO());
            StatusCode = e.StatusCode.ToString();
        }
        MethodName = nameof(GetStudent);
        StateHasChanged();

    }

    async void PutStudent()
    {
        try
        {
            var Result = await Http.PutAsJsonAsync<StudentDTO>($"http://localhost:5232/api/Student/{Student.Id.ToString()}/Put", Mapper.Map<StudentDTO>(Student));
            StatusCode = Result.StatusCode.ToString();
        }
        catch (System.Net.Http.HttpRequestException e)
        {
            StatusCode = e.StatusCode.ToString();
        }
        MethodName = nameof(PutStudent);
    }

    async void PostStudent()
    {
        try
        {   
            var Result = await Http.PostAsJsonAsync<StudentDTO>($"http://localhost:5232/api/Student", Mapper.Map<StudentDTO>(Student));
            if (Student.GroupID != null)
            {
                SetGroup();
            }
            StatusCode = Result.StatusCode.ToString();
        }
        catch (System.Net.Http.HttpRequestException e)
        {
            StatusCode = e.StatusCode.ToString();
        }
        MethodName = nameof(PostStudent);
    }

    async void SetGroup()
    {
        try
        {
            var Result = await Http.PutAsJsonAsync<StudentDTO>($"http://localhost:5232/api/Student/{Student.Id.ToString()}/SetGroup?GroupId={Student.GroupID.ToString()}", null);
            StatusCode = Result.StatusCode.ToString();
        }
        catch (System.Net.Http.HttpRequestException e)
        {
            StatusCode = e.StatusCode.ToString();
        }
        MethodName = nameof(SetGroup);
    }

    async void SetOrders()
    {
        try
        {
            var Result = await Http.PutAsJsonAsync<Tuple<Guid, bool>[]>($"http://localhost:5232/api/Student/{Student.Id.ToString()}/RedactOrders", NewOrdersList.ToArray());
            StatusCode = Result.StatusCode.ToString();
        }
        catch (System.Net.Http.HttpRequestException e)
        {
            StatusCode = e.StatusCode.ToString();
        }
        finally
        {
            NewOrdersList.Clear();
        }
        MethodName = nameof(SetOrders);
        
    }

    void AppendOrder(bool stat)
    {
        Tuple<Guid, bool> NewOrder = NewOrdersList.FirstOrDefault(tupl => tupl.Item1 == guid);
        if(NewOrder != null)
        {
            NewOrdersList.Remove(NewOrder);
        }

        NewOrdersList.Add(Tuple.Create(guid, stat));
        MethodName = nameof(AppendOrder);
    }

    void RemoveOrder()
    {
        var CurOrder = NewOrdersList.FirstOrDefault(tupl => tupl.Item1 == guid);
        if (CurOrder != null) {
            NewOrdersList.Remove(CurOrder);
            StatusCode = "Order removed";
        }
        else
        {
            StatusCode = "Order not found";
        }
        MethodName = nameof(RemoveOrder);
    }

    




}
